function [y, u, v] = readYUV(filename)
% [Y, U, V] = yuvRead()
% [Y, U, V] = yuvRead(filename)
%
% Reads a .yuv file generated by devCam. Puts out the three planes as 
% integer matrices for user manipulation. These planes are exactly those
% that make up the YUV_420_888 format image in the Android device. 
%
% If no filename is supplied, prompts user to select a .yuv file.
%
% Note the output Y matrix will be twice the size of the U, V matrices
% because they were downsampled. 
%
% devCam saves the YUV_420_888 images as an uncompressed series of
% integer values. 
% The first two values are the image width and height, resp., in pixels. 
% The third and fourth values are, resp., pixel and row strides of the 
% (possibly interleaved) U and V planes.
% The rest of the data represent integer values straight from the planes of
% the Image. 
%
% Rob Sumner, March 2015 

if nargin==0
    [fn fp] = uigetfile('*.yuv','Multiselect','on');
    filename = [fp fn];
end

% The file contains lots of 32-bit ints, but we can only read it as bytes.
f = fopen(filename); 
bytes = fread(f);  % Reads each byte in as a double value. 
fclose(f);

% Get the width and height of the image so we know where the planes begin
% and end in the sequence of integers that follow. Get the row/pixel
% stride, too. 
w = bytes2int(bytes(1:4));
h = bytes2int(bytes(5:8));
% according to android doc for YUV_420_888, u, v pixel row strides are same
uv_pixel_stride = bytes2int(bytes(9:12));
uv_row_stride = bytes2int(bytes(13:16));

% Select out the planes of data, and reshape into rectangles.
% Note that the Android Image.Plane only guarantees the data UP TO the last
% pixel in each row. Here we make the single assumption that either the U 
% or V plane is missing the last pixel, then the other is as well. This
% leads to four discernable cases:
% 1. All planes have all pixels. 
%               Total number: h*w*(1+pixel_stride/2).
% 2. The Y plane is short one pixel, U and V have all.
%               Total number: h*w*(1+pixel_stride/2) - 1.
% 3. The Y plane has all pixels, U and V each short one.
%               Total number: h*w*(1+pixel_stride/2) - 2.
% 4. All planes are missing the last pixel.
%               Total number: h*w*(1+pixel_stride/2) - 3.

% 16 represents the first byte location of actual image plane imformation
switch length(bytes)-16    % Length of data minus informational headers.
    case h*w*(1+uv_pixel_stride/2)
        % The "good" case. Simply reshape the data.
        Y_end = 16 + h*w;             % End loc of the Y plane integer data
        U_end = Y_end + uv_row_stride*h/2;    % End loc of the U plane data
        y = reshape(bytes(17:Y_end),w,h)';
        u = reshape(bytes(Y_end+1:uv_pixel_stride:U_end),w/2,h/2)';
        v = reshape(bytes(U_end+1:uv_pixel_stride:end),w/2,h/2)';
        
    case h*w*(1+uv_pixel_stride/2)-1
        Y_end = 16 + h*w -1;          % End loc of the Y plane integer data
        % Stupidly fill in missing last value by duplicating neighbor
        y = reshape([bytes(17:Y_end); bytes(Y_end)],w,h)';
        
        U_end = Y_end + uv_row_stride*h/2;    % End loc of the U plane data
        u = reshape(bytes(Y_end+1:uv_pixel_stride:U_end),w/2,h/2)';
        v = reshape(bytes(U_end+1:uv_pixel_stride:end),w/2,h/2)';
        
    case h*w*(1+uv_pixel_stride/2)-2
        Y_end = 16 + h*w;             % End loc of the Y plane integer data
        y = reshape(bytes(17:Y_end),w,h)';
        
        U_end = Y_end + uv_row_stride*h/2 - 1;% End loc of the U plane data
        % No need to fill in last value because it actually belonged to
        % other plane;
        u = reshape(bytes(Y_end+1:uv_pixel_stride:U_end),w/2,h/2)';
        v = reshape(bytes(U_end+1:uv_pixel_stride:end),w/2,h/2)';
        
    case h*w*(1+uv_pixel_stride/2)-3
        Y_end = 16 + h*w - 1;          % End loc of the Y plane integer data
        U_end = Y_end + uv_row_stride*h/2-uv_pixel_stride;  % End loc of the U plane data
        % Stupidly fill in missing last values by duplicating neighbors
        y = reshape([bytes(17:Y_end) bytes(Y_end)],w,h)';
        % No need to fill in last value because it actually belonged to
        % other plane;
        u = reshape([bytes(Y_end+1:uv_pixel_stride:U_end); bytes(U_end)],...
            w/2,h/2)';
        v = reshape(bytes(U_end+1:uv_pixel_stride:end),...
            w/2,h/2)';
    otherwise
        error('Unexpected number of data bytes in YUV image.');
end


    function integer = bytes2int(fourbytes)
        % integer = bytes2int(fourbytes)
        %
        % Turn four byte values (saved as doubles) into a 32-bit int value. 
        
        fourbytes = double(fourbytes);
        integer = fourbytes(1)*2^24 + fourbytes(2)*2^16 ...
            + fourbytes(3)*2^8 + fourbytes(4);
    end

end